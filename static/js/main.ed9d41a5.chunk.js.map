{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["operations","resetGrid","Array","from","length","map","fill","countNeighbors","grid","x","y","reduce","acc","i","j","col","App","useState","setGrid","running","setRunning","generation","setGeneration","runningRef","useRef","current","generationRef","runSimulation","useCallback","setInterval","currentGrid","produce","gridCopy","count","onClick","rows","push","Math","random","seedGrid","style","display","gridTemplateColumns","rowIdx","colIdx","key","newGrid","width","height","backgroundColor","border","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wLAOMA,EAAa,CACjB,EAAE,GAAI,GACN,EAAE,EAAG,GACL,EAAE,EAAG,GACL,CAAC,GAAI,GACL,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,EAAG,GACJ,CAAC,EAAG,IAGAC,EAAY,kBAChBC,MAAMC,KAAK,CAAEC,OAhBC,KAgBkBC,KAAI,kBAClCH,MAAMC,KAAK,CAAEC,OAhBD,KAgBoBE,KAAK,OAWnCC,EAAiB,SAACC,EAAeC,EAAWC,GAChD,OAAOV,EAAWW,QAAO,SAACC,EAAD,GAAkB,IAAD,mBAAVC,EAAU,KAAPC,EAAO,KAElCC,GAAOL,EAAII,EA9BL,OAgCZ,OADAF,GAAOJ,GAFMC,EAAII,EA9BL,QAgCKE,KAEhB,IAgGUC,EA7FC,WAAO,IAAD,EACIC,oBAAS,kBAAMhB,OADnB,mBACbO,EADa,KACPU,EADO,OAGUD,oBAAS,GAHnB,mBAGbE,EAHa,KAGJC,EAHI,OAIgBH,mBAAS,GAJzB,mBAIbI,EAJa,KAIDC,EAJC,KAMdC,EAAaC,iBAAOL,GAC1BI,EAAWE,QAAUN,EAErB,IAAMO,EAAgBF,iBAAOH,GAC7BK,EAAcD,QAAUJ,EAExB,IAAMM,EAAgBC,uBAAY,WAChCC,aAAY,WACLN,EAAWE,UAIhBP,GAAQ,SAACY,GAAD,OACNC,YAAQD,GAAa,SAACE,GACpB,IAAK,IAAInB,EAAI,EAAGA,EAzDV,GAyDuBA,IAC3B,IAAK,IAAIC,EAAI,EAAGA,EAzDZ,GAyDyBA,IAAK,CAChC,IAAMmB,EAAQ1B,EAAeuB,EAAajB,EAAGC,GACnB,IAAtBgB,EAAYjB,GAAGC,KAAamB,EAAQ,GAAKA,EAAQ,KACnDD,EAASnB,GAAGC,GAAK,GACdgB,EAAYjB,GAAGC,IAAgB,IAAVmB,IAAaD,EAASnB,GAAGC,GAAK,UAKhEQ,IAAgBI,EAAcD,YAjEtB,OAmET,IAEH,OACE,oCACE,4BACES,QAAS,WACPd,GAAYD,GACZI,EAAWE,SAAWN,EACjBA,GACHQ,MAIFR,EAAoB,OAAV,SAEd,4BACEe,QAAS,WACPhB,EAAQjB,KACRqB,EAAc,KAHlB,SAQA,4BACEY,QAAS,WACPhB,EA1EO,WAEf,IADA,IAAMiB,EAAO,GACJtB,EAAI,EAAGA,EAtBF,GAsBeA,IAC3BsB,EAAKC,KAAKlC,MAAMC,KAAKD,MAtBT,KAsByB,kBAAOmC,KAAKC,SAAW,GAAM,EAAI,MAExE,OAAOH,EAqESI,MAFZ,QAOA,0CAAgBlB,GAChB,yBACEmB,MAAO,CACLC,QAAS,OACTC,oBAAoB,UAAD,OAtGb,GAsGa,aAGpBlC,EAAKH,KAAI,SAAC8B,EAAMQ,GAAP,OACRR,EAAK9B,KAAI,SAACU,EAAK6B,GAAN,OACP,yBACEC,IAAG,UAAKF,EAAL,YAAeC,GAClBV,QAAS,WACP,IAAMY,EAAUf,YAAQvB,GAAM,SAACwB,GAC7BA,EAASW,GAAQC,GAAUpC,EAAKmC,GAAQC,GAAU,EAAI,KAExD1B,EAAQ4B,IAEVN,MAAO,CACLO,MAAO,GACPC,OAAQ,GACRC,gBAAiBzC,EAAKmC,GAAQC,GAAU,UAAY,OACpDM,OAAQ,8BC/GJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.ed9d41a5.chunk.js","sourcesContent":["import React, { useCallback, useRef, useState, FC } from 'react';\nimport produce from 'immer';\n\nconst numRows = 50;\nconst numCols = 50;\nconst speed = 500;\n\nconst operations = [\n  [-1, -1],\n  [-1, 0],\n  [-1, 1],\n  [0, -1],\n  [0, 1],\n  [1, -1],\n  [1, 0],\n  [1, 1],\n];\n\nconst resetGrid = () =>\n  Array.from({ length: numRows }).map(() =>\n    Array.from({ length: numCols }).fill(0),\n  );\n\nconst seedGrid = () => {\n  const rows = [];\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numCols), () => (Math.random() > 0.7 ? 1 : 0)));\n  }\n  return rows;\n};\n\nconst countNeighbors = (grid: any[][], x: number, y: number) => {\n  return operations.reduce((acc, [i, j]) => {\n    const row = (x + i + numRows) % numRows;\n    const col = (y + j + numCols) % numCols;\n    acc += grid[row][col];\n    return acc;\n  }, 0);\n};\n\nconst App: FC = () => {\n  const [grid, setGrid] = useState(() => resetGrid());\n\n  const [running, setRunning] = useState(false);\n  const [generation, setGeneration] = useState(0);\n\n  const runningRef = useRef(running);\n  runningRef.current = running;\n\n  const generationRef = useRef(generation);\n  generationRef.current = generation;\n\n  const runSimulation = useCallback(() => {\n    setInterval(() => {\n      if (!runningRef.current) {\n        return;\n      }\n\n      setGrid((currentGrid) =>\n        produce(currentGrid, (gridCopy) => {\n          for (let i = 0; i < numRows; i++) {\n            for (let j = 0; j < numCols; j++) {\n              const count = countNeighbors(currentGrid, i, j);\n              if (currentGrid[i][j] === 1 && (count < 2 || count > 3))\n                gridCopy[i][j] = 0;\n              if (!currentGrid[i][j] && count === 3) gridCopy[i][j] = 1;\n            }\n          }\n        }),\n      );\n      setGeneration(++generationRef.current);\n    }, speed);\n  }, []);\n\n  return (\n    <>\n      <button\n        onClick={() => {\n          setRunning(!running);\n          runningRef.current = !running;\n          if (!running) {\n            runSimulation();\n          }\n        }}\n      >\n        {!running ? 'Start' : 'Stop'}\n      </button>\n      <button\n        onClick={() => {\n          setGrid(resetGrid());\n          setGeneration(0);\n        }}\n      >\n        Clear\n      </button>\n      <button\n        onClick={() => {\n          setGrid(seedGrid());\n        }}\n      >\n        Seed\n      </button>\n      <p>Generation: {generation}</p>\n      <div\n        style={{\n          display: 'grid',\n          gridTemplateColumns: `repeat(${numCols}, 20px)`,\n        }}\n      >\n        {grid.map((rows, rowIdx) =>\n          rows.map((col, colIdx) => (\n            <div\n              key={`${rowIdx}-${colIdx}`}\n              onClick={() => {\n                const newGrid = produce(grid, (gridCopy) => {\n                  gridCopy[rowIdx][colIdx] = grid[rowIdx][colIdx] ? 0 : 1;\n                });\n                setGrid(newGrid);\n              }}\n              style={{\n                width: 20,\n                height: 20,\n                backgroundColor: grid[rowIdx][colIdx] ? '#003366' : '#eee',\n                border: '1px solid black',\n              }}\n            />\n          )),\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}